using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.Net.Http.Headers;
using System.Net.Http.Json;
using System.Text.Json;

namespace MiniApp4Max.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ApiController : ControllerBase
    {
        private readonly HttpClient _httpClient = new HttpClient();
        private static string _accessToken = "";  // ‚úÖ –ö–µ—à–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        private static DateTime _tokenExpiration = DateTime.UtcNow;  // ‚úÖ –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞

        public class CustomerRequest
        {
            public string apiLogin { get; set; }
            public string phone { get; set; }
            public string type { get; set; } = "phone";
            public string organizationId { get; set; }
        }

        private async Task<bool> RefreshTokenIfNeeded(string apiLogin)
        {
            if (!string.IsNullOrEmpty(_accessToken) && DateTime.UtcNow < _tokenExpiration.AddMinutes(-5))
            {
                Console.WriteLine("‚úÖ –¢–æ–∫–µ–Ω –µ—â—ë –∞–∫—Ç–∏–≤–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π.");
                return true;
            }

            Console.WriteLine("üì° –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω...");
            var tokenRequest = new { apiLogin = apiLogin };
            var response = await _httpClient.PostAsJsonAsync("https://api-ru.iiko.services/api/1/access_token", tokenRequest);

            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.StatusCode}");
                return false;
            }

            var content = await response.Content.ReadAsStringAsync();
            dynamic tokenData = JsonConvert.DeserializeObject(content);

            _accessToken = tokenData.token;
            _tokenExpiration = DateTime.UtcNow.AddMinutes(55);  // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ 55 –º–∏–Ω—É—Ç

            Console.WriteLine("‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!");
            return true;
        }

        [HttpPost("getCustomerInfo")]
        public async Task<IActionResult> GetCustomerInfo([FromBody] CustomerRequest request)
        {
            Console.WriteLine($"üîµ –ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω: phone={request.phone}, organizationId={request.organizationId}");

            if (!await RefreshTokenIfNeeded(request.apiLogin))
            {
                return StatusCode(500, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞");
            }

            var customerRequest = new
            {
                organizationId = request.organizationId,
                phone = request.phone,
                type = "phone",
                extraData = true
            };

            _httpClient.DefaultRequestHeaders.Clear();
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _accessToken);
            _httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

            var response = await _httpClient.PostAsJsonAsync(
                "https://api-ru.iiko.services/api/1/loyalty/iiko/customer/info",
                customerRequest
            );

            if (!response.IsSuccessStatusCode)
            {
                string error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API iiko: {response.StatusCode} - {error}");
                return BadRequest($"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API iiko: {response.StatusCode} - {error}");
            }

            string customerJson = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"üéâ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç iiko: {customerJson}");

            return Content(customerJson, "application/json");
        }
    }
}
